/* * Simple FIX Message Parser.  * `net.java.fixparser.SimpleFixParser` is non-validating FIX parser.  * It allows empty tags and does not use any data dictionary to parse incoming messages. * It is implemented with the idea to parse FIX messages with maximum performance * and keep them in a form suitable for saving into database. * * author: Leonid Shlyapnikov * email: lshlyapnikov@gmail.com */
options {
	STATIC = false;
	DEBUG_PARSER = false;
	DEBUG_LOOKAHEAD = false;
	DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(SimpleFixParser)

package net.java.fixparser;import net.java.fixparser.SimpleFixMessage;import net.java.fixparser.TagValueImpl;
/** * Simple FIX Message Parser.  * `net.java.fixparser.SimpleFixParser` is non-validating FIX parser.  * It allows empty tags and does not use any data dictionary to parse incoming messages. * It is implemented with the idea to parse FIX messages with maximum performance * and keep them in a form suitable for saving into database. * * @author Leonid Shlyapnikov */
public class SimpleFixParser {

  public static void main(String args[]) throws ParseException {
	SimpleFixParser parser = new SimpleFixParser(System.in);    while (true) {    	SimpleFixMessage msg = parser.readFixMessage();    	if (null == msg) {    		break;    	}    }
  }

}

PARSER_END(SimpleFixParser)

<DEFAULT>  TOKEN : {
	<CHECKSUM_TAG: "10" >|	<HEADER_TAG: "8" >	
|	<TAG: ( ["0"-"9"] )+ >
|	<EQ: "=" >: IN_VALUE|	<NEW_LINE: ( ["\r", "\n"] )+ >
}

<IN_VALUE> TOKEN : {
	<VALUE: ( ~["\u0001", "|" ] )+ >
|	<SOH: "\u0001" | "|" > : DEFAULT 
}
/** * Reads the next FIX message from the input stream. * If no message is available because the end of the stream * has been reached, <code>null</code> is returned. This method * blocks until input data is available, the end of the stream is detected, * or an exception is thrown. * * @return		the next FIX message, or <code>null</code> if the end of the stream is reached. * @exception	ParseException		if parse errors are encountered. */SimpleFixMessage readFixMessage() : {	SimpleFixMessage result = null;}{	(		<EOF>		|		result = FixMessage()	)		{ return result; }	}

private SimpleFixMessage FixMessage() : {
	SimpleFixMessage result = new SimpleFixMessage();
	String fixSpec;
	TagValueImpl<String, String> tagValue;
	String checksum;
}
{
	fixSpec = Header() { result.put("8", fixSpec); }
	
	(
		tagValue = TagValuePair() { result.put(tagValue); }
	)*
	
	checksum = Checksum() { result.put("10", checksum); }	
	[<NEW_LINE>]	
	{ return result; }
}

private TagValueImpl<String, String> TagValuePair() : {
	String tag = null;	String value = "";
} 
{
	<TAG> { tag = token.image; }
	"=" 	[ <VALUE> { value = token.image; } ]	<SOH>
	{ return new TagValueImpl<String, String>(tag, value); }
}

private String Header() : {
	String fixSpec = "";
}
{
	<HEADER_TAG>	"="	[ <VALUE> { fixSpec = token.image; } ]	<SOH>
	{ return  fixSpec; }
}

private String Checksum() : {
	String checksum = "";
}
{
	<CHECKSUM_TAG>	"=" 	[ <VALUE> { checksum = token.image; } ]	<SOH>
	{ return checksum; }
}

